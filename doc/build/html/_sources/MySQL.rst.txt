

MySQL 操作总结
======================

MySQL是一个关系型数据库管理系统，也是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件。

1.MySQL 建立表
----------------------






2.MySQL 约束
-----------------------

在 MySQL 中，约束是指对表中数据的一种约束，能够帮助数据库管理员更好地管理数据库，并且能够确保数据库中数据的正确性和有效性。

在 MySQL 中，主要支持以下 6 中约束：

    - **主键约束** (``PRIMARY KEY``)

        - 主键约束是使用最频繁的约束。在设计数据表时，一般情况下，都会要求表中设置一个主键

        - 主键是表的一个特殊字段，该字段能唯一标识表中的每条信息

    - **外键约束** (``FOREIGN KEY``)

        - 外键约束经常和主键一起使用，用来确保数据的一致性

    - **唯一约束**

        - 唯一约束与主键约束有一个相似的地方，就是它们都能够确保列的唯一性。
        
        - 与主键约束不同的是，唯一约束在一个表中可以有多个，并且设置唯一约束的列是允许有空值的，虽然只能有一个空值

    - **检查约束**

        - 检查约束是用来检查数据表中，字段值是否有效的一个手段

    - **非空约束** (``NOT NULL``)

        - 非空约束用来约束表中的字段不能为空

    - **默认值约束** (``DEFAULT``)

        - 默认值约束用来约束当数据表中某个字段不输入值时，自动为其添加一个已经设置好的值

        - 默认值约束通常用在已经设置了非空约束的列，这样能够防止数据表在录入数据时出现错误

.. note:: 

    以上 6 种约束中，一个数据表中只能有一个主键约束，其它约束可以有多个



2.1 主键
~~~~~~~~~~~~~~~~~~~~~~~~~

2.1.1 主键介绍
^^^^^^^^^^^^^^^^^^^^^^^^^

    主键(``PRIMARY KEY``)的完整称呼是 “主键约束”，是 MySQL 中使用最为频繁的约束。
    一般情况下，为了便于 DBMS 更快的查找到表中的记录，都会在表中设置一个主键。

    主键分为单字段主键和多字段联合主键，本节将分别讲解这两种主键约束的创建、修改和删除。

2.1.2 主键规则
^^^^^^^^^^^^^^^^^^^^^^^^^

    - 每个表只能定义一个主键

    - 主键值必须唯一标识表中的每一行，且不能为 NULL，即表中不可能存在有相同主键值的两行数据。这是唯一性原则

    - 一个字段名只能在联合主键字段表中出现一次

    - 联合主键不能包含不必要的多余字段。当把联合主键的某一字段删除后，如果剩下的字段构成的主键仍然满足唯一性原则，那么这个联合主键是不正确的。这是最小化原则









2.2 外键
~~~~~~~~~~~~~~~~~~~~~~~~~

2.2.1 外键介绍
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    MySQL 外键约束(``FOREIGN KEY``)是表的一个特殊字段，经常与主键约束一起使用。
    对于两个具有关联关系的表而言，相关联字段中主键所在的表就是主表(父表)，外键所在的表就是从表(子表)。

    外键用来建立主表与从表的关联关系，为两个表的数据建立连接，约束两个表中数据的一致性和完整性。

    主表删除某条记录时，从表中与之对应的记录也必须有相应的改变。
    一个表可以有一个或多个外键，外键可以为空值，若不为空值，则每一个外键的值必须等于主表中主键的某个值。

2.2.2 外键规则
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    - 主表必须已经存在于数据库中，或者是当前正在创建的表。如果是后一种情况，则主表与从表是同一个表，这样的表称为自参照表，这种结构称为自参照完整性。
    
    - 必须为主表定义主键

    - 主键不能包含空值，但允许在外键中出现空值。也就是说，只要外键的每个非空值出现在指定的主键中，这个外键的内容就是正确的。

    - 在主表的表名后面指定列名或列名的组合。这个列或列的组合必须是主表的主键或候选键。

    - 外键中列的数目必须和主表的主键中列的数目相同。

    - 外键中列的数据类型必须和主表主键中对应列的数据类型相同。


2.2.3 创建外键
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

(1)在创建表时设置外键约束
'''''''''''''''''''''''''''''

    .. code-block:: 

        [CONSTRAINT <外键名>] FOREIGN KEY 字段名 [，字段名2，…]
        REFERENCES <主表名> 主键列1 [，主键列2，…]


(2)在修改表时添加外键约束
'''''''''''''''''''''''''''''

    .. code-block:: 

        ALTER TABLE <数据表名> ADD CONSTRAINT <外键名>
        FOREIGN KEY(<列名>) REFERENCES <主表名> (<列名>);


2.2.4 删除外键
^^^^^^^^^^^^^^^^^^^

    当一个表中不需要外键约束时，就需要从表中将其删除。外键一旦删除，就会解除主表和从表间的关联关系。

    .. code-block:: 

        ALTER TABLE <表名> DROP FOREIGN KEY <外键约束名>;






3.MySQL 索引
-----------------

3.1 索引介绍
~~~~~~~~~~~~~~~~~~~~~~~~~

3.1.1 索引
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

索引是一种特殊的数据库结构，由数据表中的一列或多列组合而成，可以用来快速查询数据表中有某一特定值的记录

通过索引，查询数据时不用读完记录的所有信息，而只是查询索引列。否则，数据库系统将读取每条记录的所有信息进行匹配。

可以把索引比作新华字典的音序表。例如，要查“库”字，如果不使用音序，就需要从字典的 400 页中逐页来找。
但是，如果提取拼音出来，构成音序表，就只需要从 10 多页的音序表中直接查找。这样就可以大大节省时间。

.. note:: 

    MySQL 会自动为所有表的主键进行索引，但是外键字段必须由用户进行明确的索引

3.1.2 为什么要使用索引
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

索引就是根据表中的一列或若干列按照一定顺序建立的列值与记录行之间的对应关系表，
实质上是一张描述索引列的列值与原表中记录行之间一一对应关系的有序表。

索引是 MySQL 中十分重要的数据库对象，是数据库性能调优技术的基础，常用于实现数据的快速检索。

在 MySQL 中，通常有以下两种方式访问数据库表的行数据：

    - (1) 顺序访问
    
        - 顺序访问是在表中实行全表扫描，从头到尾逐行遍历，直到在无序的行数据中找到符合条件的目标数据。

        - 顺序访问实现比较简单，但是当表中有大量数据的时候，效率非常低下。例如，在几千万条数据中查找少量的数据时，
          使用顺序访问方式将会遍历所有的数据，花费大量的时间，显然会影响数据库的处理性能。
    
    - (2) 索引访问

        - 索引访问是通过遍历索引来直接访问表中记录行的方式。

        - 使用这种方式的前提是对表建立一个索引，在列上创建了索引之后，查找数据时可以直接根据该列上的索引找到对应记录行的位置，从而快捷地查找到数据。索引存储了指定列数据值的指针，根据指定的排序顺序对这些指针排序。

            - 例如，在学生基本信息表 tb_students 中，如果基于 student_id 建立了索引，系统就建立了一张索引列到实际记录的映射表。当用户需要查找 student_id 为 12022 的数据的时候，系统先在 student_id 索引上找到该记录，然后通过映射表直接找到数据行，并且返回该行数据。因为扫描索引的速度一般远远大于扫描实际数据行的速度，所以采用索引的方式可以大大提高数据库的工作效率。


简而言之，不使用索引，MySQL 就必须从第一条记录开始读完整个表，直到找出相关的行。
表越大，查询数据所花费的时间就越多。如果表中查询的列有一个索引，MySQL 就能快速到达一个位置去搜索数据文件，
而不必查看所有数据，这样将会节省很大一部分时间。

3.1.3 索引的优缺点
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

索引有其明显的优势，也有其不可避免的缺点。

    - 优点

        - 通过创建唯一索引可以保证数据库表中每一行数据的唯一性。

        - 可以给所有的 MySQL 列类型设置索引。

        - 可以大大加快数据的查询速度，这是使用索引最主要的原因。

        - 在实现数据的参考完整性方面可以加速表与表之间的连接。

        - 在使用分组和排序子句进行数据查询时也可以显著减少查询中分组和排序的时间
        
    - 缺点

        - 创建和维护索引组要耗费时间，并且随着数据量的增加所耗费的时间也会增加。

        - 索引需要占磁盘空间，除了数据表占数据空间以外，每一个索引还要占一定的物理空间。如果有大量的索引，索引文件可能比数据文件更快达到最大文件尺寸。

        - 当对表中的数据进行增加、删除和修改的时候，索引也要动态维护，这样就降低了数据的维护速度。

.. note:: 

    使用索引时，需要综合考虑索引的优点和缺点。

    索引可以提高查询速度，但是会影响插入记录的速度。因为，向有索引的表中插入记录时，数据库系统会按照索引进行排序，
    这样就降低了插入记录的速度，插入大量记录时的速度影响会更加明显。这种情况下，最好的办法是先删除表中的索引，
    然后插入数据，插入完成后，再创建索引。

3.1.4 索引的类型
^^^^^^^^^^^^^^^^^^^^^^^^^^^^


3.2 建立索引
~~~~~~~~~~~~~~~~~~~~~~~~~

MySQL 提供了三种创建索引的方法

3.2.1 创建索引的语法
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

(1)使用 ``CREATE INDEX`` 语句
'''''''''''''''''''''''''''''''''

    .. code-block:: 

        CREATE <索引名> ON <表名> (<列名> [<长度>] [ ASC | DESC])

    - 语法说明如下：

        - ``<索引名>``：指定索引名。一个表可以创建多个索引，但每个索引在该表中的名称是唯一的。

        - ``<表名>``：指定要创建索引的表名。

        -`` <列名>``：指定要创建索引的列名。通常可以考虑将查询语句中在 JOIN 子句和 WHERE 子句里经常出现的列作为索引列。

        - ``<长度>``：可选项。指定使用列前的 length 个字符来创建索引。使用列的一部分创建索引有利于减小索引文件的大小，节省索引列所占的空间。在某些情况下，只能对列的前缀进行索引。索引列的长度有一个最大上限 255 个字节（MyISAM 和 InnoDB 表的最大上限为 1000 个字节），如果索引列的长度超过了这个上限，就只能用列的前缀进行索引。另外，BLOB 或 TEXT 类型的列也必须使用前缀索引。

        - ``ASC|DESC``：可选项。ASC指定索引按照升序来排列，DESC指定索引按照降序来排列，默认为ASC。

(2)使用 ``CREATE TABLE``  语句
'''''''''''''''''''''''''''''''''

.. code-block:: 

    -- 在 CREATE TABLE 语句中添加此语句，表示在创建新表的同时创建该表的主键。
    CONSTRAINT PRIMARY KEY [索引类型] (<列名>,…)

    -- 在 CREATE TABLE 语句中添加此语句，表示在创建新表的同时创建该表的索引。
    KEY | INDEX [<索引名>] [<索引类型>] (<列名>,…)

    -- 在 CREATE TABLE 语句中添加此语句，表示在创建新表的同时创建该表的唯一性索引。
    UNIQUE [ INDEX | KEY] [<索引名>] [<索引类型>] (<列名>,…)

    -- 在 CREATE TABLE 语句中添加此语句，表示在创建新表的同时创建该表的外键。
    FOREIGN KEY <索引名> <列名>

.. note:: 

    在使用 CREATE TABLE 语句定义列选项的时候，可以通过直接在某个列定义后面添加 PRIMARY KEY 的方式创建主键。
    而当主键是由多个列组成的多列索引时，则不能使用这种方法，只能用在语句的最后加上一个 PRIMARY KRY(<列名>，…) 
    子句的方式来实现。

(3)使用 ``ALTER TABLE`` 语句
'''''''''''''''''''''''''''''''''

.. code-block:: 

    -- 在 ALTER TABLE 语句中添加此语法成分，表示在修改表的同时为该表添加索引。
    ADD INDEX [<索引名>] [<索引类型>] (<列名>,…)

    -- 在 ALTER TABLE 语句中添加此语法成分，表示在修改表的同时为该表添加主键。
    ADD PRIMARY KEY [<索引类型>] (<列名>,…)

    -- 在 ALTER TABLE 语句中添加此语法成分，表示在修改表的同时为该表添加唯一性索引。
    ADD UNIQUE [ INDEX | KEY] [<索引名>] [<索引类型>] (<列名>,…)

    -- 在 ALTER TABLE 语句中添加此语法成分，表示在修改表的同时为该表添加外键。
    ADD FOREIGN KEY [<索引名>] (<列名>,…)


3.2.2 创建普通索引
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    创建普通索引时，通常使用 INDEX 关键字。

    .. code-block:: sql

        CREATE TABLE table_name (
            id INT NOT NULL,
            name CHAR(45) DEFAULT NULL,
            dept_id INT DEFAULT NULL,
            age INT DEFAULT NULL,
            height INT DEFAULT NULL,
            INDEX(height)
        );

3.2.3 创建唯一索引
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    创建唯一索引，通常使用 UNIQUE 参数。

    .. code-block:: sql

        CREATE TABLE table_name (
            id INT NOT NULL,
            name CHAR(45) DEFAULT NULL,
            dept_id INT DEFAULT NULL,
            age INT DEFAULT NULL,
            height INT DEFAULT NULL,
            UNIQUE INDEX(height)
        );


3.3 查看索引
~~~~~~~~~~~~~~~~~~~~~~~~~

    索引创建完成后，可以利用 SQL 语句查看已经存在的索引。在 MySQL 中，可以使用 SHOW INDEX 语句查看表中创建的索引。

    .. code-block:: 

        SHOW INDEX FROM <表名> [ FROM <数据库名>]


3.4 删除索引
~~~~~~~~~~~~~~~~~~~~~~~~~

    删除索引是指将表中已经存在的索引删除掉。不用的索引建议进行删除，因为它们会降低表的更新速度，影响数据库的性能。
    对于这样的索引，应该将其删除。


3.4.1 使用 ``DROP INDEX`` 语句
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    .. code-block:: 

        DROP INDEX <索引名> ON <表名>


3.4.2 使用 ``ALTER TABLE`` 语句
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

根据 ALTER TABLE 语句的语法可知，该语句也可以用于删除索引。具体使用方法是将 ``ALTER TABLE`` 语句的语法中部分指定为以下子句中的某一项。

    - DROP PRIMARY KEY：表示删除表中的主键。一个表只有一个主键，主键也是一个索引。
    
    - DROP INDEX index_name：表示删除名称为 index_name 的索引。
    
    - DROP FOREIGN KEY fk_symbol：表示删除外键。
